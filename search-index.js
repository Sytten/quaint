var searchIndex = JSON.parse('{\
"quaint":{"doc":"quaint","t":[0,3,12,4,13,13,4,13,13,13,13,13,13,13,13,13,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,8,10,10,10,3,8,11,3,3,4,13,13,13,13,13,13,13,13,13,13,13,13,13,5,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,6,3,12,8,10,8,10,4,13,13,3,3,3,4,13,4,13,13,13,13,3,8,10,4,13,13,13,13,13,8,10,4,13,13,6,8,10,11,11,3,12,3,4,13,13,13,13,13,13,13,4,13,13,3,12,3,8,16,10,4,13,13,13,13,3,12,12,12,3,3,8,10,3,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,0,3,3,3,4,13,13,3,3,8,3,3,3,3,4,13,13,13,13,12,12,13,12,4,13,13,13,13,3,4,13,13,13,4,13,13,13,13,13,3,8,10,8,10,8,10,8,10,10,10,10,10,10,11,11,11,11,11,11,8,11,5,3,3,12,12,12,12,12,12,3,0,4,13,13,13,13,4,13,13,11,3,11,11,11,4,13,13,12,13,12,13,12,13,12,13,13,12,13,12,13,12,13,12,13,13,13,13,12,13,13,13,13,12,13,13,13,13,12,12,13,13,12,13,12,13,13,12,12,0,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,0,4,13,13,13,13,12,12,13,12,8,10,10,10,10,10,10,11,11,11,11,11,11,3,3,4,13,13,13,13,3,8,11,0,11,5,5,3,0,3,11,11,11,0,3,3,3,3,6,8,18,18,18,10,10,11,11,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,6,14,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ast","Column","name","DefaultValue","Provided","Generated","TypeFamily","Text","Int","Float","Double","Boolean","Uuid","DateTime","Decimal","Bytes","Comparable","equals","not_equals","less_than","less_than_or_equals","greater_than","greater_than_or_equals","in_selection","not_in_selection","like","not_like","begins_with","not_begins_with","ends_into","not_ends_into","is_null","is_not_null","between","not_between","compare_raw","Compare","Equals","NotEquals","LessThan","LessThanOrEquals","GreaterThan","GreaterThanOrEquals","In","NotIn","Like","NotLike","BeginsWith","NotBeginsWith","EndsInto","NotEndsInto","Null","NotNull","Between","NotBetween","Raw","ConditionTree","And","Or","Not","Single","NoCondition","NegativeCondition","Conjunctive","and","or","not","CommonTableExpression","IntoCommonTableExpression","into_cte","Delete","Expression","ExpressionKind","Parameterized","RawValue","Column","Row","Selection","Function","Asterisk","Op","Values","ConditionTree","Compare","Value","Default","asterisk","default_value","AggregateToString","aggregate_to_string","Average","avg","Count","count","Lower","lower","Maximum","max","Minimum","min","RowNumber","row_number","RowToJson","row_to_json","Sum","sum","Upper","upper","Function","GroupByDefinition","Grouping","0","Groupable","group","IntoGroupByDefinition","into_group_by_definition","IndexDefinition","Single","Compound","Insert","SingleRowInsert","MultiRowInsert","OnConflict","DoNothing","Join","Inner","Left","Right","Full","JoinData","Joinable","on","SqlOp","Add","Sub","Mul","Div","Rem","IntoOrderDefinition","into_order_definition","Order","Asc","Desc","OrderDefinition","Orderable","order","ascend","descend","Ordering","0","Over","Query","Select","Insert","Update","Delete","Union","Merge","Raw","SelectQuery","Select","Union","Row","values","Select","Aliasable","Target","alias","TableType","Table","JoinedTable","Query","Values","Table","typ","alias","database","Union","Update","IntoRaw","raw","Raw","Value","Integer","Float","Double","Text","Enum","Bytes","Boolean","Char","Array","Numeric","Json","Xml","Uuid","DateTime","Date","Time","Values","connector","Mysql","MysqlUrl","PostgreSql","SslAcceptMode","Strict","AcceptInvalidCerts","SslParams","PostgresUrl","ValueIndex","ResultRow","ResultRowRef","ResultSet","ResultSetIterator","ConnectionInfo","Postgres","Mysql","Mssql","Sqlite","file_path","db_name","InMemorySqlite","db_name","SqlFamily","Postgres","Mysql","Sqlite","Mssql","MssqlUrl","EncryptMode","On","Off","DangerPlainText","IsolationLevel","ReadUncommitted","ReadCommitted","RepeatableRead","Snapshot","Serializable","Mssql","GetRow","get_result_row","TakeRow","take_result_row","ToColumnNames","to_column_names","Queryable","query","query_raw","execute","execute_raw","raw_cmd","version","select","insert","update","delete","server_reset_query","begin_statement","TransactionCapable","start_transaction","sqlite_version","Sqlite","SqliteParams","connection_limit","file_path","db_name","socket_timeout","max_connection_lifetime","max_idle_connection_lifetime","Transaction","error","DatabaseConstraint","Fields","Index","ForeignKey","CannotParse","Name","Available","Unavailable","available","Error","original_code","original_message","kind","ErrorKind","QueryError","DatabaseDoesNotExist","db_name","DatabaseAccessDenied","db_name","DatabaseAlreadyExists","db_name","AuthenticationFailed","user","NotFound","TableDoesNotExist","table","UniqueConstraintViolation","constraint","NullConstraintViolation","constraint","ForeignKeyConstraintViolation","constraint","ConnectionError","ColumnReadFailure","ResultIndexOutOfBounds","ColumnNotFound","column","ResultTypeMismatch","DatabaseUrlIsInvalid","ConversionError","LengthMismatch","column","InvalidConnectionArguments","IoError","ConnectTimeout","PoolTimeout","max_open","in_use","SocketTimeout","TlsError","message","ValueOutOfRange","message","FromRowError","IncorrectNumberOfParameters","expected","actual","pooled","PooledConnection","Quaint","Builder","connection_limit","max_idle","connect_timeout","pool_timeout","max_lifetime","max_idle_lifetime","test_on_check_out","health_check_interval","build","builder","capacity","check_out","connection_info","prelude","ConnectionInfo","Postgres","Mysql","Mssql","Sqlite","file_path","db_name","InMemorySqlite","db_name","Queryable","query","query_raw","execute","execute_raw","raw_cmd","version","select","insert","update","delete","server_reset_query","begin_statement","ResultRow","ResultSet","SqlFamily","Postgres","Mysql","Sqlite","Mssql","Transaction","TransactionCapable","start_transaction","serde","from_first","from_rows","from_row","ValueDeserializer","single","Quaint","new","new_in_memory","connection_info","visitor","Mssql","Mysql","Postgres","Sqlite","Result","Visitor","C_BACKTICK_OPEN","C_BACKTICK_CLOSE","C_WILDCARD","build","write","compatibility_modifications","surround_with","add_parameter","visit_limit_and_offset","visit_insert","parameter_substitution","visit_aggregate_to_string","visit_raw_value","visit_parameterized","visit_joins","visit_join_data","visit_select","visit_update","visit_delete","delimited_identifiers","visit_merge","visit_query","visit_selection","visit_union","visit_columns","visit_operation","visit_expression","visit_multiple_tuple_comparison","visit_values","visit_table","visit_column","visit_row","visit_conditions","visit_compare","visit_equals","visit_not_equals","visit_ordering","visit_grouping","visit_average","visit_function","visit_partitioning","visit_cte","Value","Integer","Float","Double","Text","Enum","Bytes","Boolean","Char","Array","Numeric","Json","Xml","Uuid","DateTime","Date","Time","Result","values","col","val","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","try_from","borrow","borrow_mut","try_into","type_id","vzip","borrow_to_sql","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","into_iter","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_string","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_string","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_string","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_string","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","from","into","try_from","borrow","borrow_mut","try_into","type_id","vzip","equals","not_equals","less_than","less_than_or_equals","greater_than","greater_than_or_equals","in_selection","not_in_selection","like","not_like","begins_with","not_begins_with","ends_into","not_ends_into","is_null","is_not_null","between","not_between","compare_raw","equals","not_equals","less_than","less_than_or_equals","greater_than","greater_than_or_equals","in_selection","not_in_selection","like","not_like","begins_with","not_begins_with","ends_into","not_ends_into","is_null","is_not_null","between","not_between","compare_raw","group","into_group_by_definition","into_group_by_definition","into_group_by_definition","on","order","into_order_definition","into_order_definition","alias","alias","alias","alias","build","write","add_parameter","compatibility_modifications","visit_equals","visit_not_equals","visit_raw_value","visit_limit_and_offset","visit_insert","visit_merge","parameter_substitution","visit_aggregate_to_string","visit_multiple_tuple_comparison","visit_ordering","visit_average","build","write","visit_raw_value","visit_insert","parameter_substitution","add_parameter","visit_limit_and_offset","visit_aggregate_to_string","visit_equals","visit_not_equals","build","write","add_parameter","parameter_substitution","visit_limit_and_offset","visit_raw_value","visit_insert","visit_aggregate_to_string","visit_equals","visit_not_equals","build","write","visit_raw_value","visit_insert","parameter_substitution","add_parameter","visit_limit_and_offset","visit_aggregate_to_string","visit_values","query","execute","query_raw","execute_raw","raw_cmd","version","query","execute","query_raw","execute_raw","raw_cmd","version","begin_statement","query","execute","query_raw","execute_raw","raw_cmd","version","query","execute","query_raw","execute_raw","raw_cmd","version","server_reset_query","query","execute","query_raw","execute_raw","raw_cmd","version","query","execute","query_raw","execute_raw","raw_cmd","version","server_reset_query","begin_statement","query","execute","query_raw","execute_raw","raw_cmd","version","begin_statement","start_transaction","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into_iter","into_iter","into_iter","into_iter","next","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","default","default","default","default","default","default","default","default","default","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","eq","ne","eq","ne","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","div","rem","sub","try_from","try_from","try_from","from_str","from_str","add","mul","index","index","deserialize_any","deserialize_option","deserialize_bytes","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_byte_buf","deserialize_string","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","into_deserializer","to_sql","to_sql","accepts","to_sql_checked","to_sql","default","type_family","default_autogen","new","table","opt_table","and","or","not","single","invert_if","column","into_cte","from_table","so_that","kind","alias","is_asterisk","order_by","partition_by","new","is_empty","has_autogen","contains","single_into","single","multi_into","multi","expression_into","on_conflict","returning","value","build","values","build","all_from","new","is_empty","ascend","descend","is_empty","is_select","is_insert","is_update","is_delete","is_union","named_selection","new","with_capacity","pop","push","is_empty","len","from_table","and_from","value","column","columns","distinct","so_that","and_where","or_where","inner_join","left_join","right_join","full_join","order_by","group_by","having","limit","offset","with","database","asterisk","add_unique_index","left_join","inner_join","right_join","full_join","new","all","distinct","table","set","so_that","integer","numeric","float","double","text","enum_variant","bytes","boolean","character","array","uuid","datetime","date","time","json","xml","is_null","is_text","as_str","as_char","to_string","into_string","is_bytes","as_bytes","to_bytes","is_integer","as_i64","as_f64","as_f32","is_numeric","into_numeric","as_numeric","is_bool","as_bool","is_array","is_uuid","as_uuid","is_datetime","as_datetime","is_date","as_date","is_time","as_time","is_json","as_json","into_json","into_vec","empty","new","with_capacity","push","len","is_empty","row_len","flatten_row","from_url","dbname","schema_name","host","username","file_path","sql_family","port","pg_bouncer","database_location","as_str","from_scheme","scheme_is_supported","is_postgres","is_mysql","is_sqlite","is_mssql","select","insert","update","delete","server_reset_query","begin_statement","start_transaction","at","get","as_ref","into_single","at","get","new","last_insert_id","columns","len","is_empty","first","get","into_single","commit","rollback","connection_limit","socket_timeout","connect_timeout","pool_timeout","transaction_isolation_level","dbname","schema","host","username","port","connection_string","max_connection_lifetime","max_idle_connection_lifetime","new","new","new","url","username","password","dbname","host","socket","port","connect_timeout","pool_timeout","socket_timeout","max_connection_lifetime","max_idle_connection_lifetime","new","new","url","username","host","dbname","password","port","schema","pg_bouncer","connect_timeout","pool_timeout","socket_timeout","max_connection_lifetime","max_idle_connection_lifetime","new","new","new_in_memory"],"q":["quaint","quaint::astquaint","quaint::connector","","","","","","","","","","","","","","","","","","quaint::connector::ConnectionInfo","","quaint::connector","quaint::connector::ConnectionInfo","quaint::connector","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","quaint","quaint::error","","","","","","","","","","","","","","","","quaint::error::ErrorKind","quaint::error","quaint::error::ErrorKind","quaint::error","quaint::error::ErrorKind","quaint::error","quaint::error::ErrorKind","quaint::error","","quaint::error::ErrorKind","quaint::error","quaint::error::ErrorKind","quaint::error","quaint::error::ErrorKind","quaint::error","quaint::error::ErrorKind","quaint::error","","","","quaint::error::ErrorKind","quaint::error","","","","quaint::error::ErrorKind","quaint::error","","","","quaint::error::ErrorKind","","quaint::error","","quaint::error::ErrorKind","quaint::error","quaint::error::ErrorKind","quaint::error","","quaint::error::ErrorKind","","quaint","quaint::pooled","","","","","","","","","","","","","","","","quaint","quaint::prelude","","","","","quaint::prelude::ConnectionInfo","","quaint::prelude","quaint::prelude::ConnectionInfo","quaint::prelude","","","","","","","quaint::connector","","","","","","quaint::prelude","","","","","","","","","quaint::connector","quaint","quaint::connector","quaint::serde","","","quaint","quaint::single","","","","quaint","quaint::visitor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","quaint","","","","","","","","","","","","","","","","","","","","","quaint::astquaint::connectorquaint::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","quaint::pooled","","","","","","","","","","","","","","","","","","","","","","","","","","quaint::serde","","","","","","","","quaint::single","","","","","","","","","","quaint::visitor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","quaint::ast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","quaint","quaint::ast","","","quaint","quaint::ast","","","","quaint::visitor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","quaint::connector","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","quaint::pooled","","","","","","","","quaint::single","","","","","","","quaint::connector","quaint::ast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","quaint::error","","","","","","","","","","","","","","","","","","","quaint::ast","","quaint::connector","","","quaint::ast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","quaint::connector","","","","","","","","","quaint::pooled","quaint::single","quaint::ast","","","","","","","","","","","quaint::connector","quaint::ast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","quaint::connector","","quaint::error","","","","quaint::ast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","quaint::connector","","","","","","","","","","","","","","","","quaint::error","","","","quaint::serde","quaint::single","quaint::ast","quaint::connector","","","quaint::error","","","","quaint::ast","","","","quaint::connector","","","","quaint::ast","","quaint::connector","","quaint::serde","","","","","","","","","","","","","","","","","","","","","","","","","","","","","quaint::ast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","quaint::connector","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An abstract syntax tree for SQL queries.","A column definition.","","Defines a default value for a <code>Column</code>.","A static value.","Generated in the database.","","","","","","","","","","","An item that can be compared against other values in the …","Tests if both sides are the same value.","Tests if both sides are not the same value.","Tests if the left side is smaller than the right side.","Tests if the left side is smaller than the right side or …","Tests if the left side is bigger than the right side.","Tests if the left side is bigger than the right side or …","Tests if the left side is included in the right side …","Tests if the left side is not included in the right side …","Tests if the left side includes the right side string.","Tests if the left side does not include the right side …","Tests if the left side starts with the right side string.","Tests if the left side doesn’t start with the right …","Tests if the left side ends into the right side string.","Tests if the left side does not end into the right side …","Tests if the left side is <code>NULL</code>.","Tests if the left side is not <code>NULL</code>.","Tests if the value is between two given values.","Tests if the value is not between two given values.","Compares two expressions with a custom operator.","For modeling comparison expressions.","<code>left = right</code>","<code>left <> right</code>","<code>left < right</code>","<code>left <= right</code>","<code>left > right</code>","<code>left >= right</code>","<code>left IN (..)</code>","<code>left NOT IN (..)</code>","<code>left LIKE %..%</code>","<code>left NOT LIKE %..%</code>","<code>left LIKE ..%</code>","<code>left NOT LIKE ..%</code>","<code>left LIKE %..</code>","<code>left NOT LIKE %..</code>","<code>value IS NULL</code>","<code>value IS NOT NULL</code>","<code>value</code> BETWEEN <code>left</code> AND <code>right</code>","<code>value</code> NOT BETWEEN <code>left</code> AND <code>right</code>","Raw comparator, allows to use an operator <code>left <raw> right</code>…","Tree structures and leaves for condition building.","<code>(left_expression AND right_expression)</code>","<code>(left_expression OR right_expression)</code>","<code>(NOT expression)</code>","A single expression leaf","A leaf that does nothing to the condition, <code>1=1</code>","A leaf that cancels the condition, <code>1=0</code>","<code>AND</code>, <code>OR</code> and <code>NOT</code> conjunctive implementations.","Builds an <code>AND</code> condition having <code>self</code> as the left leaf and …","Builds an <code>OR</code> condition having <code>self</code> as the left leaf and …","Builds a <code>NOT</code> condition having <code>self</code> as the condition.","A builder for a common table expression (CTE) statement, …","Conversion into a common table expression.","","A builder for a <code>DELETE</code> statement.","An expression that can be positioned in a query. Can be a …","An expression we can compare and use in database queries.","Anything that we must parameterize before querying","A user-provided value we do not parameterize.","A database column","Data in a row form, e.g. (1, 2, 3)","A nested <code>SELECT</code> or <code>SELECT .. UNION</code> statement","A database function call","A qualified asterisk to a table","An operation: sum, sub, mul or div.","A <code>VALUES</code> statement","A tree of expressions to evaluate from the deepest value …","A comparison expression","A single value, column, row or a nested select","DEFAULT keyword, e.g. for …","A quick alias to create an asterisk to a table.","A quick alias to create a default value expression.","An aggregate function that concatenates strings from a …","Aggregates the given field into a string.","A representation of the <code>AVG</code> function in the database.","Calculates the average value of a numeric column.","Returns the number of rows that matches a specified …","Count of the underlying table where the given expression …","A represention of the <code>LOWER</code> function in the database.","Converts the result of the expression into lowercase …","A represention of the <code>MAX</code> function in the database.","Calculates the maximum value of a numeric column.","A represention of the <code>MIN</code> function in the database.","Calculates the minimum value of a numeric column.","A window function that assigns a sequential integer …","A number from 1 to n in specified order","A representation of the <code>ROW_TO_JSON</code> function in the …","Return the given table in <code>JSON</code> format.","A represention of the <code>SUM</code> function in the database.","Calculates the sum value of a numeric column.","A represention of the <code>UPPER</code> function in the database.","Converts the result of the expression into uppercase …","A database function definition","Defines a grouping for the <code>GROUP BY</code> statement.","A list of definitions for the <code>GROUP BY</code> statement","","An item that can be used in the <code>GROUP BY</code> statement","Group by <code>self</code>","Convert the value into a group by definition.","","A definition of a database index.","","","A builder for an <code>INSERT</code> statement.","A builder for an <code>INSERT</code> statement for a single row.","A builder for an <code>INSERT</code> statement for multiple rows.","<code>INSERT</code> conflict resolution strategies.","When a row already exists, do nothing. Works with …","A representation of a <code>JOIN</code> statement.","Implements an <code>INNER JOIN</code> with given <code>JoinData</code>.","Implements an <code>LEFT JOIN</code> with given <code>JoinData</code>.","Implements an <code>RIGHT JOIN</code> with given <code>JoinData</code>.","Implements an <code>FULL JOIN</code> with given <code>JoinData</code>.","The <code>JOIN</code> table and conditions.","An item that can be joined.","Add the <code>JOIN</code> conditions.","Calculation operations in SQL queries.","","","","","","Convert the value into an order definition with order …","","The ordering direction","Ascending","Descending","Defines ordering for an <code>ORDER BY</code> statement.","An item that can be used in the <code>ORDER BY</code> statement","Order by <code>self</code> in the given order","Change the order to <code>ASC</code>","Change the order to <code>DESC</code>","A list of definitions for the <code>ORDER BY</code> statement.","","Determines the partitioning and ordering of a rowset …","A database query","","","","","","","","A database query that only returns data without modifying …","","","A collection of values surrounded by parentheses.","","A builder for a <code>SELECT</code> statement.","An object that can be aliased.","","Alias table for usage elsewhere in the query.","Either an identifier or a nested query.","","","","","A table definition","","","","A builder for a <code>UNION</code>s over multiple <code>SELECT</code> statements.","A builder for an <code>UPDATE</code> statement.","Converts the value into a state to skip parameterization.","","A value written to the query as-is without …","A value we must parameterize for the prepared statement. …","64-bit signed integer.","32-bit floating point.","64-bit floating point.","String value.","Database enum value.","Bytes value.","Boolean value.","A single character.","An array value (PostgreSQL).","A numeric value.","A JSON value.","A XML value.","An UUID value.","A datetime value.","A date value.","A time value.","An in-memory temporary table. Can be used in some of the …","A set of abstractions for database connections.","A connector interface for the MySQL database.","Wraps a connection url and exposes the parsing logic used …","A connector interface for the PostgreSQL database.","","","","","Wraps a connection url and exposes the parsing logic used …","","An owned version of a <code>Row</code> in a <code>ResultSet</code>. See ResultRowRef…","A reference to a <code>Row</code> in a <code>ResultSet</code>. The columns can be …","Encapsulates a set of results and their respective column …","Thin iterator for ResultSet rows. Might become lazy one …","General information about a SQL connection.","A PostgreSQL connection URL.","A MySQL connection URL.","A SQL Server connection URL.","A SQLite connection URL.","The filesystem path of the SQLite database.","The name the database is bound to - Always “main”","","","One of the supported SQL variants.","","","","","Wraps a connection url and exposes the parsing logic used …","TLS mode when connecting to SQL Server.","All traffic is encrypted."," Only the login credentials are encrypted.","Nothing is encrypted.","Controls the locking and row versioning behavior of …","","","","","","A connector interface for the SQL Server database.","","","","","","","Represents a connection or a transaction that can be …","Execute the given query.","Execute a query given as SQL, interpolating the given …","Execute the given query, returning the number of affected …","Execute a query given as SQL, interpolating the given …","Run a command in the database, for queries that can’t …","Return the version of the underlying database, queried …","Execute a <code>SELECT</code> query.","Execute an <code>INSERT</code> query.","Execute an <code>UPDATE</code> query, returning the number of affected …","Execute a <code>DELETE</code> query, returning the number of affected …","Execute an arbitrary function in the beginning of each …","Statement to begin a transaction","A thing that can start a new transaction.","Starts a new transaction","Returns the SQLite version as a string; e.g., <code>\\\"3.16.2\\\"</code> …","A connector interface for the SQLite database","Wraps a connection url and exposes the parsing logic used …","","This is not a <code>PathBuf</code> because we need to <code>ATTACH</code> the …","","","","","A representation of an SQL database transaction. If not …","Error module","","","","","","","","","","The error types for database I/O, connection and query …","The error code sent by the database, if available.","The original error message sent by the database, if …","A more specific error type for matching.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A connection pool to a SQL database.","A connection from the pool. Implements Queryable.","The main entry point and an abstraction over database …","A <code>Builder</code> to construct an instance of a <code>Quaint</code> pool.","The maximum number of connections in the pool.","The maximum number of idle connections the pool can …","A timeout for connecting to the database. If not set, the …","A timeout for acquiring a connection with the <code>check_out</code> …","A time how long a connection can be kept in the pool …","A time how long an idling connection can be kept in the …","Perform a health check before returning a connection from …","Sets the interval how often a connection health will be …","Consume the builder and create a new instance of a pool.","Creates a new builder for a Quaint connection pool with …","The number of connections in the pool.","Reserve a connection from the pool.","Info about the connection and underlying database.","A “prelude” for users of the <code>quaint</code> crate.","General information about a SQL connection.","A PostgreSQL connection URL.","A MySQL connection URL.","A SQL Server connection URL.","A SQLite connection URL.","The filesystem path of the SQLite database.","The name the database is bound to - Always “main”","","","Represents a connection or a transaction that can be …","Execute the given query.","Execute a query given as SQL, interpolating the given …","Execute the given query, returning the number of affected …","Execute a query given as SQL, interpolating the given …","Run a command in the database, for queries that can’t …","Return the version of the underlying database, queried …","Execute a <code>SELECT</code> query.","Execute an <code>INSERT</code> query.","Execute an <code>UPDATE</code> query, returning the number of affected …","Execute a <code>DELETE</code> query, returning the number of affected …","Execute an arbitrary function in the beginning of each …","Statement to begin a transaction","An owned version of a <code>Row</code> in a <code>ResultSet</code>. See ResultRowRef…","Encapsulates a set of results and their respective column …","One of the supported SQL variants.","","","","","A representation of an SQL database transaction. If not …","A thing that can start a new transaction.","Starts a new transaction","Convert results from the database into any type …","Takes the first row and deserializes it.","Deserialize each row of a <code>ResultSet</code>.","Deserialize a row into any type implementing <code>Deserialize</code>.","","A single connection abstraction to a SQL database.","The main entry point and an abstraction over a database …","Create a new connection to the database. The connection …","Open a new SQLite database in memory.","Info about the connection and underlying database.","Visitors for reading an abstract SQL syntax tree, …","A visitor to generate queries for the SQL Server database.","A visitor to generate queries for the MySQL database.","A visitor to generate queries for the PostgreSQL database.","A visitor to generate queries for the SQLite database.","","A function travelling through the query AST, building the …","Opening backtick character to surround identifiers, such …","Closing backtick character to surround identifiers, such …","Wildcard character to be used in <code>LIKE</code> queries.","Convert the given <code>Query</code> to an SQL string and a vector of …","Write to the query.","A point to modify an incoming query to make it compatible …","","When called, the visitor decided to not render the …","The <code>LIMIT</code> and <code>OFFSET</code> statement in the query","A walk through an <code>INSERT</code> statement","What to use to substitute a parameter in the query.","What to use to substitute a parameter in the query.","Visit a non-parameterized value.","A visit to a value we parameterize","The join statements in the query","","A walk through a <code>SELECT</code> statement","A walk through an <code>UPDATE</code> statement","A walk through an <code>DELETE</code> statement","A helper for delimiting an identifier, surrounding every …","Visit an SQL <code>MERGE</code> query.","A walk through a complete <code>Query</code> statement","","A walk through a union of <code>SELECT</code> statements","The selected columns","","A visit to a value used in an expression","","","A database table identifier","A database column identifier","A row of data used as an expression","A walk through the query conditions","A comparison expression","","","A visit in the <code>ORDER BY</code> section of the query","A visit in the <code>GROUP BY</code> section of the query","","","","","A value we must parameterize for the prepared statement. …","64-bit signed integer.","32-bit floating point.","64-bit floating point.","String value.","Database enum value.","Bytes value.","Boolean value.","A single character.","An array value (PostgreSQL).","A numeric value.","A JSON value.","A XML value.","An UUID value.","A datetime value.","A date value.","A time value.","","Convert given set of tuples into <code>Values</code>.","Marks a given string or a tuple as a column. Useful when …","Marks a given string as a value. Useful when using a …point to modify an incoming query to make it compatible …ets the default value for the column.","Sets a type family, used mainly for SQL Server <code>OUTPUT</code> …","True when the default value is set and automatically …","Create a column definition.","Include the table name in the column expression.","Include the table name in the column expression, if table …","An <code>AND</code> statement, is true when both sides are true.","An <code>OR</code> statement, is true when one side is true.","A <code>NOT</code> statement, is true when the expression is false.","A single leaf, is true when the expression is true.","Inverts the entire condition tree if condition is met.","Selects a named value from the nested expresion. The …","","Creates a new <code>DELETE</code> statement for the given table.","Adds <code>WHERE</code> conditions to the query. See Comparable for …","The type of the expression, dictates how it’s …","The name alias of the expression, how it can referred in …","","Define the order of the row number. Is the row order if …","Define the partitioning of the row number","","","At least one of the index columns has automatically …","True if the index definition contains the given column.","Creates a new single row <code>INSERT</code> statement for the given …","","Creates a new multi row <code>INSERT</code> statement for the given …","","","Sets the conflict resolution strategy.","Sets the returned columns.","Adds a new value to the <code>INSERT</code> statement","Convert into a common <code>Insert</code> statement.","Adds a new row to be inserted.","Convert into a common <code>Insert</code> statement.","Implement a join with no conditions.","","","Change the order to <code>ASC</code>","Change the order to <code>DESC</code>","","","","","","","Finds all named values or columns from the selection.","","","","","","","Creates a new <code>SELECT</code> statement for the given table.","Adds a table to be selected.","Selects a static value as the column.","Adds a column to be selected.","A bulk method to select multiple values.","Adds <code>DISTINCT</code> to the select query.","Adds <code>WHERE</code> conditions to the query, replacing the …","Adds an additional <code>WHERE</code> condition to the query combining …","Adds an additional <code>WHERE</code> condition to the query combining …","Adds <code>INNER JOIN</code> clause to the query.","Adds <code>LEFT JOIN</code> clause to the query.","Adds <code>RIGHT JOIN</code> clause to the query.","Adds <code>FULL JOIN</code> clause to the query.","Adds an ordering to the <code>ORDER BY</code> section.","Adds a grouping to the <code>GROUP BY</code> section.","Adds group conditions to a query. Should be combined …","Sets the <code>LIMIT</code> value.","Sets the <code>OFFSET</code> value.","Adds a common table expression to the select.","Define in which database the table is located","A qualified asterisk to this table","Add unique index definition.","Adds a <code>LEFT JOIN</code> clause to the query, specifically for …","Adds an <code>INNER JOIN</code> clause to the query, specifically for …","Adds a <code>RIGHT JOIN</code> clause to the query, specifically for …","Adds a <code>FULL JOIN</code> clause to the query, specifically for …","","Creates a union with previous selection and the given …","Creates a union with previous selection and the given …","Creates the basis for an <code>UPDATE</code> statement to the given …","Add another column value assignment to the query","Adds <code>WHERE</code> conditions to the query. See Comparable for …","Creates a new integer value.","Creates a new decimal value.","Creates a new float value.","Creates a new double value.","Creates a new string value.","Creates a new enum value.","Creates a new bytes value.","Creates a new boolean value.","Creates a new character value.","Creates a new array value.","Creates a new uuid value.","Creates a new datetime value.","Creates a new date value.","Creates a new time value.","Creates a new JSON value.","Creates a new XML value.","<code>true</code> if the <code>Value</code> is null.","<code>true</code> if the <code>Value</code> is text.","Returns a &str if the value is text, otherwise <code>None</code>.","Returns a char if the value is a char, otherwise <code>None</code>.","Returns a cloned String if the value is text, otherwise …","Transforms the <code>Value</code> to a <code>String</code> if it’s text, …","Returns whether this value is the <code>Bytes</code> variant.","Returns a bytes slice if the value is text or a byte …","Returns a cloned <code>Vec<u8></code> if the value is text or a byte …","<code>true</code> if the <code>Value</code> is an integer.","Returns an <code>i64</code> if the value is an integer, otherwise <code>None</code>.","Returns a <code>f64</code> if the value is a double, otherwise <code>None</code>.","Returns a <code>f32</code> if the value is a double, otherwise <code>None</code>.","<code>true</code> if the <code>Value</code> is a numeric value or can be converted …","Returns a bigdecimal, if the value is a numeric, float or …","Returns a reference to a bigdecimal, if the value is a …","<code>true</code> if the <code>Value</code> is a boolean value.","Returns a bool if the value is a boolean, otherwise <code>None</code>.","<code>true</code> if the <code>Value</code> is an Array.","<code>true</code> if the <code>Value</code> is of UUID type.","Returns an UUID if the value is of UUID type, otherwise …","<code>true</code> if the <code>Value</code> is a DateTime.","Returns a <code>DateTime</code> if the value is a <code>DateTime</code>, otherwise …","<code>true</code> if the <code>Value</code> is a Date.","Returns a <code>NaiveDate</code> if the value is a <code>Date</code>, otherwise <code>None</code>…","<code>true</code> if the <code>Value</code> is a <code>Time</code>.","Returns a <code>NaiveTime</code> if the value is a <code>Time</code>, otherwise <code>None</code>…","<code>true</code> if the <code>Value</code> is a JSON value.","Returns a reference to a JSON Value if of Json type, …","Transforms to a JSON Value if of Json type, otherwise <code>None</code>…","Returns a Vec if the value is an array of T, otherwise …","Create a new empty in-memory set of values.","Create a new in-memory set of values.","Create a new in-memory set of values with an allocated …","Add value to the temporary table.","The number of rows in the in-memory table.","True if has no rows.","","","Parse <code>ConnectionInfo</code> out from an SQL connection string.","The provided database name. This will be <code>None</code> on SQLite.","This is what item names are prefixed with in queries.","The provided database host. This will be <code>\\\"localhost\\\"</code> on …","The provided database user name. This will be <code>None</code> on …","The database file for SQLite, otherwise <code>None</code>.","The family of databases connected.","The provided database port, if applicable.","Whether the pgbouncer mode is enabled.","A string describing the database location, meant for …","Get a string representation of the family.","Convert url scheme to an SqlFamily.","Check if a family exists for the given scheme.","True, if family is PostgreSQL.","True, if family is MySQL.","True, if family is SQLite.","True, if family is SQL Server.","Execute a <code>SELECT</code> query.","Execute an <code>INSERT</code> query.","Execute an <code>UPDATE</code> query, returning the number of affected …","Execute a <code>DELETE</code> query, returning the number of affected …","Execute an arbitrary function in the beginning of each …","Statement to begin a transaction","Starts a new transaction","Take a value from a certain position in the row, if …","Take a value with the given column name from the row. …","Make a referring ResultRowRef.","","Take a value from a certain position in the row, if …","Take a value with the given column name from the row.","Creates a new instance, bound to the given column names …","The last id inserted, if available. Only works on certain …","An iterator of column names.","Returns the number of rows in the <code>ResultSet</code>.","Returns true if the <code>ResultSet</code> contains no rows.","Returns the first row of the <code>ResultSet</code>, or None if the …","Returns a reference to a row in a given position.","Takes the first row if existing, otherwise returns error.","Commit the changes to the database and consume the …","Rolls back the changes to the database.","Maximum number of connections the pool can have (if used …","A duration how long one query can take.","A duration how long we can try to connect to the database.","A pool check_out timeout.","The isolation level of a transaction.","Name of the database.","The prefix which to use when querying database.","Database hostname.","The username to use when connecting to the database.","Database port.","The JDBC connection string","The maximum connection lifetime","The maximum idle connection lifetime","Creates a new connection to SQL Server.","","Parse <code>Url</code> to <code>MysqlUrl</code>. Returns error for mistyped …","The bare <code>Url</code> to the database.","The percent-decoded database username.","The percent-decoded database password.","Name of the database connected. Defaults to <code>mysql</code>.","The database host. If <code>socket</code> and <code>host</code> are not set, …","If set, connected to the database through a Unix socket.","The database port, defaults to <code>3306</code>.","The connection timeout.","The pool check_out timeout","The socket timeout","The maximum connection lifetime","The maximum idle connection lifetime","Create a new MySQL connection using <code>OptsBuilder</code> from the …","Parse <code>Url</code> to <code>PostgresUrl</code>. Returns error for mistyped …","The bare <code>Url</code> to the database.","The percent-decoded database username.","The database host. Taken first from the <code>host</code> query …","Name of the database connected. Defaults to <code>postgres</code>.","The percent-decoded database password.","The database port, defaults to <code>5432</code>.","The database schema, defaults to <code>public</code>.","Whether the pgbouncer mode is enabled.","The connection timeout.","Pool check_out timeout","The socket timeout","The maximum connection lifetime","The maximum idle connection lifetime","Create a new connection to the database.","","Open a new SQLite database in memory."],"i":[0,0,1,0,2,2,0,3,3,3,3,3,3,3,3,3,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,6,6,6,6,6,6,0,7,7,7,0,0,8,0,0,0,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,11,0,12,0,13,13,0,0,0,0,14,0,15,15,15,15,0,0,16,0,17,17,17,17,17,0,18,0,19,19,0,0,20,20,20,0,21,0,0,22,22,22,22,22,22,22,0,23,23,0,24,0,0,25,25,0,26,26,26,26,0,27,27,27,0,0,0,28,0,0,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,0,0,0,0,0,0,30,30,0,0,0,0,0,0,0,0,31,31,31,31,32,32,31,33,0,34,34,34,34,0,0,35,35,35,0,36,36,36,36,36,0,0,37,0,38,0,39,0,40,40,40,40,40,40,40,40,40,40,40,40,0,41,0,0,0,42,42,42,42,42,42,0,0,0,43,43,43,43,0,44,44,44,0,45,45,45,0,46,46,47,46,48,46,49,46,50,46,46,51,46,52,46,53,46,54,46,46,46,46,55,46,46,46,46,56,46,46,46,46,57,57,46,46,58,46,59,46,46,60,60,0,0,0,0,61,61,61,61,61,61,61,61,61,62,62,62,62,0,0,31,31,31,31,32,32,31,33,0,40,40,40,40,40,40,40,40,40,40,40,40,0,0,0,34,34,34,34,0,0,41,0,63,0,0,0,0,0,64,64,64,0,0,0,0,0,0,0,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,0,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,0,0,0,0,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,66,66,66,66,66,66,66,66,66,66,67,67,67,67,67,67,67,67,67,67,68,68,68,68,68,68,68,68,68,68,9,9,9,9,9,9,9,9,9,9,69,69,69,69,69,69,69,69,69,69,70,70,70,70,70,70,70,70,70,70,71,71,71,71,71,71,71,71,71,71,72,72,72,72,72,72,72,72,72,72,73,73,73,73,73,73,73,73,73,73,74,74,74,74,74,74,74,74,74,74,75,75,75,75,75,75,75,75,75,75,76,76,76,76,76,76,76,76,76,76,77,77,77,77,77,77,77,77,77,77,78,78,78,78,78,78,78,78,78,78,79,79,79,79,79,79,79,79,79,79,10,10,10,10,10,10,10,10,10,10,13,13,13,13,13,13,13,13,13,13,80,80,80,80,80,80,80,80,80,80,81,81,81,81,81,81,81,81,81,81,82,82,82,82,82,82,82,82,82,82,14,14,14,14,14,14,14,14,14,14,83,83,83,83,83,83,83,83,83,83,15,15,15,15,15,15,15,15,15,15,17,17,17,17,17,17,17,17,17,17,21,21,21,21,21,21,21,21,21,21,19,19,19,19,19,19,19,19,19,19,84,84,84,84,84,84,84,84,84,84,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,85,85,85,85,85,85,85,85,85,85,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,86,86,86,86,86,86,86,86,86,86,87,87,87,87,87,87,87,87,87,87,88,88,88,88,88,88,88,88,88,88,29,29,29,29,29,29,29,29,29,29,29,29,89,89,89,89,89,89,89,89,89,89,31,31,31,31,31,31,31,31,31,31,34,34,34,34,34,34,34,34,34,34,34,90,90,90,90,90,90,90,90,91,91,91,91,91,91,91,91,63,63,63,63,63,63,63,63,92,92,92,92,92,92,92,92,92,93,93,93,93,93,93,93,93,94,94,94,94,94,94,94,94,94,94,35,35,35,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,36,36,95,95,95,95,95,95,95,95,96,96,96,96,96,96,96,96,97,97,97,97,97,97,97,97,97,97,98,98,98,98,98,98,98,98,30,30,30,30,30,30,30,30,30,30,99,99,99,99,99,99,99,99,99,99,100,100,100,100,100,100,100,100,100,100,101,101,101,101,101,101,101,101,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,43,44,44,44,44,44,44,44,44,44,45,45,45,45,45,45,45,45,45,46,46,46,46,46,46,46,46,46,102,102,102,102,102,102,102,102,62,62,62,62,62,62,62,62,62,62,61,61,61,61,61,61,61,61,103,103,103,103,103,103,103,103,64,64,64,64,64,64,64,64,64,64,104,104,104,104,104,104,104,104,105,105,105,105,105,105,105,105,106,106,106,106,106,106,106,106,107,107,107,107,107,107,107,107,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,1,1,79,108,83,1,1,109,1,68,79,27,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,105,105,105,105,105,105,105,105,105,105,106,106,106,106,106,106,106,106,106,106,107,107,107,107,107,107,107,107,107,93,93,93,93,93,93,95,95,95,95,95,95,95,96,96,96,96,96,96,98,98,98,98,98,98,98,101,101,101,101,101,101,102,102,102,102,102,102,102,102,64,64,64,64,64,64,64,95,2,68,1,1,1,1,6,68,68,6,22,68,68,68,68,68,68,68,68,79,68,79,68,79,68,79,68,79,68,79,68,79,68,79,68,79,68,79,68,13,13,22,80,80,22,22,83,22,23,23,22,24,24,24,24,24,24,68,22,27,27,27,27,27,27,27,27,27,27,27,22,68,22,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,89,45,45,45,45,45,45,45,44,46,45,45,45,45,45,45,45,45,45,45,24,89,90,63,92,3,1,2,5,6,66,67,68,9,69,70,71,72,73,74,75,76,77,78,79,10,13,80,81,82,14,83,15,17,21,19,84,22,23,24,85,26,27,86,87,88,29,89,31,34,94,35,36,97,30,99,100,62,64,1,2,6,75,10,21,84,24,85,86,89,63,2,2,1,5,5,6,6,66,66,67,67,68,68,9,9,69,69,70,70,71,71,72,72,73,73,74,74,75,75,76,76,77,77,78,78,79,79,10,10,13,13,80,80,81,81,82,82,14,83,83,15,15,17,17,21,21,19,84,84,22,22,23,23,24,24,85,85,26,26,27,86,86,87,87,88,88,29,29,89,89,34,30,43,43,44,44,3,1,2,5,6,66,67,68,9,69,70,71,72,73,74,75,76,77,78,79,10,13,80,81,82,14,83,15,17,21,19,84,22,23,24,85,26,27,86,87,88,29,89,31,34,90,91,63,94,35,36,95,96,97,98,30,99,100,42,43,44,45,46,103,64,29,34,35,36,43,44,45,46,68,68,68,29,42,101,35,36,68,68,91,90,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,29,29,29,29,29,29,1,1,1,1,1,1,6,6,6,6,6,66,8,67,67,68,68,68,75,75,10,10,13,13,80,80,80,80,80,80,80,81,81,82,82,83,21,21,20,20,84,22,22,22,22,22,23,24,24,24,24,24,24,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,27,27,27,27,27,27,27,86,86,86,87,87,87,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,89,89,89,89,89,89,89,89,31,31,31,31,31,31,31,31,31,31,34,34,34,34,34,34,34,40,40,40,40,40,40,41,90,90,90,90,91,91,63,63,63,63,63,63,63,63,93,93,94,94,94,94,94,94,94,94,94,94,94,94,94,95,94,97,97,97,97,97,97,97,97,97,97,97,97,97,96,100,100,100,100,100,100,100,100,100,100,100,100,100,100,98,101,101],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["conditiontree",4]],[[],["conditiontree",4]],[[],["conditiontree",4]],null,null,[[],["commontableexpression",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["expression",3]],[[],["expression",3]],null,[[],["function",3]],null,[[],["function",3]],null,[[],["function",3]],null,[[],["function",3]],null,[[],["function",3]],null,[[],["function",3]],null,[[],["rownumber",3]],null,[[["bool",15]],["function",3]],null,[[],["function",3]],null,[[],["function",3]],null,null,null,null,null,[[],["groupbydefinition",6]],null,[[],["groupbydefinition",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["joindata",3]],null,null,null,null,null,null,null,[[],["orderdefinition",6]],null,null,null,null,null,[[["order",4],["option",4]],["orderdefinition",6]],[[],["orderdefinition",6]],[[],["orderdefinition",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,[[],["raw",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["vec",3],["result",6]]],null,[[],[["vec",3],["result",6]]],null,[[],[["vec",3],["string",3]]],null,[[["query",4]],[["box",3],["pin",3]]],[[["str",15]],[["box",3],["pin",3]]],[[["query",4]],[["box",3],["pin",3]]],[[["str",15]],[["box",3],["pin",3]]],[[["str",15]],[["box",3],["pin",3]]],[[],[["pin",3],["box",3]]],[[["select",3]],[["box",3],["pin",3]]],[[["insert",3]],[["box",3],["pin",3]]],[[["update",3]],[["box",3],["pin",3]]],[[["delete",3]],[["box",3],["pin",3]]],[[["transaction",3]],[["box",3],["pin",3]]],[[],["str",15]],null,[[],[["pin",3],["box",3]]],[[],["str",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,[[],[["option",4],["str",15]]],[[],[["option",4],["str",15]]],[[],["errorkind",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15]]],[[["u64",15]]],[[["duration",3]]],[[["duration",3]]],[[["duration",3]]],[[["duration",3]]],[[["bool",15]]],[[["duration",3]]],[[],["quaint",3]],[[["str",15]],[["builder",3],["result",6]]],[[]],[[]],[[],["connectioninfo",4]],null,null,null,null,null,null,null,null,null,null,null,[[["query",4]],[["box",3],["pin",3]]],[[["str",15]],[["box",3],["pin",3]]],[[["query",4]],[["box",3],["pin",3]]],[[["str",15]],[["box",3],["pin",3]]],[[["str",15]],[["box",3],["pin",3]]],[[],[["pin",3],["box",3]]],[[["select",3]],[["box",3],["pin",3]]],[[["insert",3]],[["box",3],["pin",3]]],[[["update",3]],[["box",3],["pin",3]]],[[["delete",3]],[["box",3],["pin",3]]],[[["transaction",3]],[["box",3],["pin",3]]],[[],["str",15]],null,null,null,null,null,null,null,null,null,[[],[["pin",3],["box",3]]],null,[[],[["deserializeowned",8],["result",6]]],[[["resultset",3]],[["result",6],["vec",3]]],[[["resultrow",3]],[["deserializeowned",8],["result",6]]],null,null,null,[[["str",15]]],[[],[["quaint",3],["result",6]]],[[],["connectioninfo",4]],null,null,null,null,null,null,null,null,null,null,[[],["result",6]],[[["display",8]],["result",6]],[[["query",4]],["query",4]],[[["str",15]],["result",6]],[[["value",4]]],[[["value",4],["option",4]],["result",6]],[[["insert",3]],["result",6]],[[],["result",6]],[[["expression",3]],["result",6]],[[["value",4]],["result",6]],[[["value",4]],["result",6]],[[["vec",3],["join",4]],["result",6]],[[["joindata",3]],["result",6]],[[["select",3]],["result",6]],[[["update",3]],["result",6]],[[["delete",3]],["result",6]],[[],["result",6]],[[["merge",3]],["result",6]],[[["query",4]],["result",6]],[[["selectquery",4]],["result",6]],[[["union",3]],["result",6]],[[["vec",3],["expression",3]],["result",6]],[[["sqlop",4]],["result",6]],[[["expression",3]],["result",6]],[[["bool",15],["row",3],["values",3]],["result",6]],[[["values",3]],["result",6]],[[["table",3],["bool",15]],["result",6]],[[["column",3]],["result",6]],[[["row",3]],["result",6]],[[["conditiontree",4]],["result",6]],[[["compare",4]],["result",6]],[[["expression",3]],["result",6]],[[["expression",3]],["result",6]],[[["ordering",3]],["result",6]],[[["grouping",3]],["result",6]],[[["average",3]],["result",6]],[[["function",3]],["result",6]],[[["over",3]],["result",6]],[[["commontableexpression",3]],["result",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["tosql",8]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["compare",4]],[[],["groupbydefinition",6]],[[],["groupbydefinition",6]],[[],["groupbydefinition",6]],[[],["groupbydefinition",6]],[[],["joindata",3]],[[["order",4],["option",4]],["orderdefinition",6]],[[],["orderdefinition",6]],[[],["orderdefinition",6]],[[]],[[]],[[]],[[]],[[],["result",6]],[[["display",8]],["result",6]],[[["value",4]]],[[["query",4]],["query",4]],[[["expression",3]],["result",6]],[[["expression",3]],["result",6]],[[["value",4]],["result",6]],[[["value",4],["option",4]],["result",6]],[[["insert",3]],["result",6]],[[["merge",3]],["result",6]],[[],["result",6]],[[["expression",3]],["result",6]],[[["bool",15],["row",3],["values",3]],["result",6]],[[["ordering",3]],["result",6]],[[["average",3]],["result",6]],[[],["result",6]],[[["display",8]],["result",6]],[[["value",4]],["result",6]],[[["insert",3]],["result",6]],[[],["result",6]],[[["value",4]]],[[["value",4],["option",4]],["result",6]],[[["expression",3]],["result",6]],[[["expression",3]],["result",6]],[[["expression",3]],["result",6]],[[],["result",6]],[[["display",8]],["result",6]],[[["value",4]]],[[],["result",6]],[[["value",4],["option",4]],["result",6]],[[["value",4]],["result",6]],[[["insert",3]],["result",6]],[[["expression",3]],["result",6]],[[["expression",3]],["result",6]],[[["expression",3]],["result",6]],[[],["result",6]],[[["display",8]],["result",6]],[[["value",4]],["result",6]],[[["insert",3]],["result",6]],[[],["result",6]],[[["value",4]]],[[["value",4],["option",4]],["result",6]],[[["expression",3]],["result",6]],[[["values",3]],["result",6]],[[["query",4]],[["box",3],["pin",3]]],[[["query",4]],[["box",3],["pin",3]]],[[["str",15]],[["box",3],["pin",3]]],[[["str",15]],[["box",3],["pin",3]]],[[["str",15]],[["box",3],["pin",3]]],[[],[["pin",3],["box",3]]],[[["query",4]],[["box",3],["pin",3]]],[[["query",4]],[["box",3],["pin",3]]],[[["str",15]],[["box",3],["pin",3]]],[[["str",15]],[["box",3],["pin",3]]],[[["str",15]],[["box",3],["pin",3]]],[[],[["pin",3],["box",3]]],[[],["str",15]],[[["query",4]],[["box",3],["pin",3]]],[[["query",4]],[["box",3],["pin",3]]],[[["str",15]],[["box",3],["pin",3]]],[[["str",15]],[["box",3],["pin",3]]],[[["str",15]],[["box",3],["pin",3]]],[[],[["pin",3],["box",3]]],[[["query",4]],[["box",3],["pin",3]]],[[["query",4]],[["box",3],["pin",3]]],[[["str",15]],[["box",3],["pin",3]]],[[["str",15]],[["box",3],["pin",3]]],[[["str",15]],[["box",3],["pin",3]]],[[],[["pin",3],["box",3]]],[[["transaction",3]],[["box",3],["pin",3]]],[[["query",4]],[["box",3],["pin",3]]],[[["query",4]],[["box",3],["pin",3]]],[[["str",15]],[["box",3],["pin",3]]],[[["str",15]],[["box",3],["pin",3]]],[[["str",15]],[["box",3],["pin",3]]],[[],[["pin",3],["box",3]]],[[["query",4]],[["box",3],["pin",3]]],[[["query",4]],[["box",3],["pin",3]]],[[["str",15]],[["box",3],["pin",3]]],[[["str",15]],[["box",3],["pin",3]]],[[["str",15]],[["box",3],["pin",3]]],[[],[["pin",3],["box",3]]],[[["transaction",3]],[["box",3],["pin",3]]],[[],["str",15]],[[["query",4]],[["box",3],["pin",3]]],[[["query",4]],[["box",3],["pin",3]]],[[["str",15]],[["box",3],["pin",3]]],[[["str",15]],[["box",3],["pin",3]]],[[["str",15]],[["box",3],["pin",3]]],[[],[["pin",3],["box",3]]],[[],["str",15]],[[],[["pin",3],["box",3]]],[[]],[[["column",3]]],[[["str",15]]],[[["str",15]]],[[["string",3]]],[[],["column",3]],[[["compare",4]]],[[["compare",4]]],[[["conditiontree",4]]],[[["select",3]]],[[["delete",3]]],[[["row",3]]],[[["function",3]]],[[["raw",3]]],[[["values",3]]],[[["sqlop",4]]],[[]],[[["vec",3]]],[[["expressionkind",4]]],[[["rowtojson",3]]],[[["rowtojson",3]]],[[["rownumber",3]]],[[["rownumber",3]]],[[["count",3]]],[[["count",3]]],[[["aggregatetostring",3]]],[[["aggregatetostring",3]]],[[["average",3]]],[[["average",3]]],[[["sum",3]]],[[["sum",3]]],[[["lower",3]]],[[["lower",3]]],[[["upper",3]]],[[["upper",3]]],[[["minimum",3]]],[[["minimum",3]]],[[["maximum",3]]],[[["maximum",3]]],[[]],[[["vec",3]]],[[["insert",3]]],[[["singlerowinsert",3]]],[[["multirowinsert",3]]],[[["singlerowinsert",3]],["query",4]],[[["multirowinsert",3]],["query",4]],[[]],[[]],[[["select",3]]],[[["union",3]]],[[["selectquery",4]]],[[["vec",3]],["row",3]],[[]],[[]],[[]],[[]],[[]],[[["select",3]],["expression",3]],[[["select",3]],["query",4]],[[["str",15]],["table",3]],[[["string",3]],["table",3]],[[],["table",3]],[[],["table",3]],[[],["table",3]],[[],["table",3]],[[["string",3]]],[[["vec",3],["row",3]]],[[["values",3]]],[[],["table",3]],[[["select",3]]],[[["union",3]]],[[["union",3]]],[[["update",3]]],[[["i64",15]]],[[["i64",15],["option",4]]],[[["bool",15]]],[[["bool",15],["option",4]]],[[["str",15]]],[[["option",4],["str",15]]],[[["string",3]]],[[["string",3],["option",4]]],[[["usize",15]]],[[["usize",15],["option",4]]],[[["i32",15]]],[[["option",4],["i32",15]]],[[]],[[["option",4]]],[[["f64",15]]],[[["f64",15],["option",4]]],[[["f32",15]]],[[["option",4],["f32",15]]],[[["utc",3],["datetime",3]]],[[["option",4],["datetime",3]]],[[["naivetime",3]]],[[["option",4],["naivetime",3]]],[[["naivedate",3]]],[[["naivedate",3],["option",4]]],[[["bigdecimal",3]]],[[["option",4],["bigdecimal",3]]],[[["jsonvalue",4]]],[[["jsonvalue",4],["option",4]]],[[["uuid",3]]],[[["uuid",3],["option",4]]],[[]],[[["error",4]],["error",3]],[[["error",4]],["error",3]],[[["error",3]],["error",3]],[[["error",3]],["error",3]],[[["error",3]],["error",3]],[[["error",4]],["error",3]],[[["fromsqlerror",4]],["error",3]],[[["option",4]]],[[["error",3]]],[[["parsebigdecimalerror",4]]],[[["error",3]]],[[["error",3]]],[[["tryfrominterror",3]]],[[["error",3]],["error",3]],[[["parseerror",4]],["error",3]],[[["error",3]],["error",3]],[[["parseinterror",3]],["error",3]],[[["parseboolerror",3]],["error",3]],[[["fromutf8error",3]],["error",3]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["typefamily",4]],[[],["column",3]],[[],["defaultvalue",4]],[[],["compare",4]],[[],["conditiontree",4]],[[],["commontableexpression",3]],[[],["delete",3]],[[],["expression",3]],[[],["expressionkind",4]],[[],["aggregatetostring",3]],[[],["average",3]],[[],["count",3]],[[],["lower",3]],[[],["maximum",3]],[[],["minimum",3]],[[],["rownumber",3]],[[],["rowtojson",3]],[[],["sum",3]],[[],["upper",3]],[[],["function",3]],[[],["grouping",3]],[[],["indexdefinition",4]],[[],["insert",3]],[[],["singlerowinsert",3]],[[],["multirowinsert",3]],[[],["onconflict",4]],[[],["joindata",3]],[[],["join",4]],[[],["sqlop",4]],[[],["ordering",3]],[[],["order",4]],[[],["over",3]],[[],["query",4]],[[],["selectquery",4]],[[],["row",3]],[[],["select",3]],[[],["tabletype",4]],[[],["table",3]],[[],["union",3]],[[],["update",3]],[[],["raw",3]],[[],["value",4]],[[],["values",3]],[[],["connectioninfo",4]],[[],["sqlfamily",4]],[[],["mssqlurl",3]],[[],["encryptmode",4]],[[],["isolationlevel",4]],[[],["mysqlurl",3]],[[],["sslacceptmode",4]],[[],["sslparams",3]],[[],["postgresurl",3]],[[],["quaint",3]],[[],["quaint",3]],[[],["column",3]],[[]],[[]],[[],["rownumber",3]],[[],["grouping",3]],[[],["ordering",3]],[[],["over",3]],[[],["row",3]],[[],["select",3]],[[],["union",3]],[[],["values",3]],[[],["resultset",3]],[[["defaultvalue",4]],["bool",15]],[[["defaultvalue",4]],["bool",15]],[[["column",3]],["bool",15]],[[["compare",4]],["bool",15]],[[["compare",4]],["bool",15]],[[["conditiontree",4]],["bool",15]],[[["conditiontree",4]],["bool",15]],[[["commontableexpression",3]],["bool",15]],[[["commontableexpression",3]],["bool",15]],[[["delete",3]],["bool",15]],[[["delete",3]],["bool",15]],[[["expression",3]],["bool",15]],[[["expression",3]],["bool",15]],[[["expressionkind",4]],["bool",15]],[[["expressionkind",4]],["bool",15]],[[["aggregatetostring",3]],["bool",15]],[[["aggregatetostring",3]],["bool",15]],[[["average",3]],["bool",15]],[[["average",3]],["bool",15]],[[["count",3]],["bool",15]],[[["count",3]],["bool",15]],[[["lower",3]],["bool",15]],[[["lower",3]],["bool",15]],[[["maximum",3]],["bool",15]],[[["maximum",3]],["bool",15]],[[["minimum",3]],["bool",15]],[[["minimum",3]],["bool",15]],[[["rownumber",3]],["bool",15]],[[["rownumber",3]],["bool",15]],[[["rowtojson",3]],["bool",15]],[[["rowtojson",3]],["bool",15]],[[["sum",3]],["bool",15]],[[["sum",3]],["bool",15]],[[["upper",3]],["bool",15]],[[["upper",3]],["bool",15]],[[["function",3]],["bool",15]],[[["function",3]],["bool",15]],[[["grouping",3]],["bool",15]],[[["grouping",3]],["bool",15]],[[["indexdefinition",4]],["bool",15]],[[["indexdefinition",4]],["bool",15]],[[["insert",3]],["bool",15]],[[["insert",3]],["bool",15]],[[["singlerowinsert",3]],["bool",15]],[[["singlerowinsert",3]],["bool",15]],[[["multirowinsert",3]],["bool",15]],[[["multirowinsert",3]],["bool",15]],[[["onconflict",4]],["bool",15]],[[["joindata",3]],["bool",15]],[[["joindata",3]],["bool",15]],[[["join",4]],["bool",15]],[[["join",4]],["bool",15]],[[["sqlop",4]],["bool",15]],[[["sqlop",4]],["bool",15]],[[["ordering",3]],["bool",15]],[[["ordering",3]],["bool",15]],[[["order",4]],["bool",15]],[[["over",3]],["bool",15]],[[["over",3]],["bool",15]],[[["query",4]],["bool",15]],[[["query",4]],["bool",15]],[[["selectquery",4]],["bool",15]],[[["selectquery",4]],["bool",15]],[[["row",3]],["bool",15]],[[["row",3]],["bool",15]],[[["select",3]],["bool",15]],[[["select",3]],["bool",15]],[[["tabletype",4]],["bool",15]],[[["tabletype",4]],["bool",15]],[[["table",3]],["bool",15]],[[["union",3]],["bool",15]],[[["union",3]],["bool",15]],[[["update",3]],["bool",15]],[[["update",3]],["bool",15]],[[["raw",3]],["bool",15]],[[["raw",3]],["bool",15]],[[["value",4]],["bool",15]],[[["value",4]],["bool",15]],[[["values",3]],["bool",15]],[[["values",3]],["bool",15]],[[["sqlfamily",4]],["bool",15]],[[["sslacceptmode",4]],["bool",15]],[[["databaseconstraint",4]],["bool",15]],[[["databaseconstraint",4]],["bool",15]],[[["name",4]],["bool",15]],[[["name",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["columndata",4]],["result",6]],[[["str",15]],["result",6]],[[["str",15]],["result",6]],[[["str",15]],["result",6]],[[["str",15]],["result",6]],[[]],[[]],[[],["value",4]],[[],["value",4]],[[["visitor",8]],["result",4]],[[["visitor",8]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[],["columndata",4]],[[["bytesmut",3],["postgrestype",3]],[["box",3],["result",4],["isnull",4]]],[[["postgrestype",3]],["bool",15]],[[["type",3],["bytesmut",3]],[["result",4],["box",3],["isnull",4]]],[[],[["result",4],["rusqlerror",4],["tosqloutput",4]]],[[]],[[["typefamily",4]]],[[],["bool",15]],[[]],[[]],[[["option",4]]],[[],["conditiontree",4]],[[],["conditiontree",4]],[[],["conditiontree",4]],[[],["conditiontree",4]],[[["bool",15]],["conditiontree",4]],[[]],[[],["commontableexpression",3]],[[]],[[]],[[],["expressionkind",4]],[[],[["option",4],["str",15]]],[[],["bool",15]],[[]],[[]],[[["vec",3],["groupbydefinition",6]]],[[],["bool",15]],[[],["bool",15]],[[["column",3]],["bool",15]],[[],["singlerowinsert",3]],[[],["singlerowinsert",3]],[[],["multirowinsert",3]],[[],["multirowinsert",3]],[[]],[[["onconflict",4]]],[[]],[[],["singlerowinsert",3]],[[],["insert",3]],[[]],[[],["insert",3]],[[]],[[["vec",3],["orderdefinition",6]]],[[],["bool",15]],[[],["orderdefinition",6]],[[],["orderdefinition",6]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],[["vec",3],["string",3]]],[[]],[[["usize",15]]],[[],[["expression",3],["option",4]]],[[]],[[],["bool",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["commontableexpression",3]]],[[]],[[],["expression",3]],[[]],[[]],[[]],[[]],[[]],[[["select",3]]],[[["select",3]]],[[["select",3]]],[[]],[[],["update",3]],[[]],[[]],[[["bigdecimal",3]]],[[["f32",15]]],[[["f64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["uuid",3]]],[[["utc",3],["datetime",3]]],[[["naivedate",3]]],[[["naivetime",3]]],[[["value",4]]],[[]],[[],["bool",15]],[[],["bool",15]],[[],[["option",4],["str",15]]],[[],[["char",15],["option",4]]],[[],[["string",3],["option",4]]],[[],[["string",3],["option",4]]],[[],["bool",15]],[[],["option",4]],[[],[["vec",3],["option",4]]],[[],["bool",15]],[[],[["i64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["option",4],["f32",15]]],[[],["bool",15]],[[],[["option",4],["bigdecimal",3]]],[[],[["option",4],["bigdecimal",3]]],[[],["bool",15]],[[],[["bool",15],["option",4]]],[[],["bool",15]],[[],["bool",15]],[[],[["uuid",3],["option",4]]],[[],["bool",15]],[[],[["option",4],["datetime",3]]],[[],["bool",15]],[[],[["naivedate",3],["option",4]]],[[],["bool",15]],[[],[["option",4],["naivetime",3]]],[[],["bool",15]],[[],[["option",4],["value",4]]],[[],[["value",4],["option",4]]],[[],[["option",4],["vec",3]]],[[]],[[["vec",3],["row",3]]],[[["usize",15]]],[[]],[[],["usize",15]],[[],["bool",15]],[[],["usize",15]],[[],[["option",4],["row",3]]],[[["str",15]],["result",6]],[[],[["option",4],["str",15]]],[[],["str",15]],[[],["str",15]],[[],[["option",4],["cow",4]]],[[],[["option",4],["str",15]]],[[],["sqlfamily",4]],[[],[["option",4],["u16",15]]],[[],["bool",15]],[[],["string",3]],[[],["str",15]],[[["str",15]],["option",4]],[[["str",15]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["select",3]],[["box",3],["pin",3]]],[[["insert",3]],[["box",3],["pin",3]]],[[["update",3]],[["box",3],["pin",3]]],[[["delete",3]],[["box",3],["pin",3]]],[[["transaction",3]],[["box",3],["pin",3]]],[[],["str",15]],[[],[["pin",3],["box",3]]],[[["usize",15]],[["value",4],["option",4]]],[[["str",15]],[["value",4],["option",4]]],[[],["resultrowref",3]],[[],[["value",4],["result",6]]],[[["usize",15]],[["value",4],["option",4]]],[[["str",15]],[["value",4],["option",4]]],[[["vec",3],["vec",3],["vec",3],["string",3]]],[[],[["u64",15],["option",4]]],[[],["vec",3]],[[],["usize",15]],[[],["bool",15]],[[],[["option",4],["resultrowref",3]]],[[["usize",15]],[["option",4],["resultrowref",3]]],[[],[["result",6],["resultrow",3]]],[[]],[[]],[[],[["usize",15],["option",4]]],[[],[["duration",3],["option",4]]],[[],[["duration",3],["option",4]]],[[],[["duration",3],["option",4]]],[[],[["option",4],["isolationlevel",4]]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],[["option",4],["str",15]]],[[],["u16",15]],[[],["str",15]],[[],[["duration",3],["option",4]]],[[],[["duration",3],["option",4]]],[[["mssqlurl",3]]],[[["str",15]],["result",6]],[[["url",3]],[["result",4],["error",3]]],[[],["url",3]],[[],[["str",15],["cow",4]]],[[],[["option",4],["cow",4]]],[[],["str",15]],[[],["str",15]],[[],["option",4]],[[],["u16",15]],[[],[["duration",3],["option",4]]],[[],[["duration",3],["option",4]]],[[],[["duration",3],["option",4]]],[[],[["duration",3],["option",4]]],[[],[["duration",3],["option",4]]],[[["mysqlurl",3]]],[[["url",3]],[["result",4],["error",3]]],[[],["url",3]],[[],[["str",15],["cow",4]]],[[],["str",15]],[[],["str",15]],[[],[["str",15],["cow",4]]],[[],["u16",15]],[[],["str",15]],[[],["bool",15]],[[],[["duration",3],["option",4]]],[[],[["duration",3],["option",4]]],[[],[["duration",3],["option",4]]],[[],[["duration",3],["option",4]]],[[],[["duration",3],["option",4]]],[[["postgresurl",3]]],[[["str",15]],[["result",6],["sqlite",3]]],[[],[["result",6],["sqlite",3]]]],"p":[[3,"Column"],[4,"DefaultValue"],[4,"TypeFamily"],[8,"Comparable"],[4,"Compare"],[4,"ConditionTree"],[8,"Conjunctive"],[8,"IntoCommonTableExpression"],[4,"ExpressionKind"],[3,"Grouping"],[8,"Groupable"],[8,"IntoGroupByDefinition"],[4,"IndexDefinition"],[4,"OnConflict"],[4,"Join"],[8,"Joinable"],[4,"SqlOp"],[8,"IntoOrderDefinition"],[4,"Order"],[8,"Orderable"],[3,"Ordering"],[4,"Query"],[4,"SelectQuery"],[3,"Row"],[8,"Aliasable"],[4,"TableType"],[3,"Table"],[8,"IntoRaw"],[4,"Value"],[4,"SslAcceptMode"],[4,"ConnectionInfo"],[13,"Sqlite"],[13,"InMemorySqlite"],[4,"SqlFamily"],[4,"EncryptMode"],[4,"IsolationLevel"],[8,"GetRow"],[8,"TakeRow"],[8,"ToColumnNames"],[8,"Queryable"],[8,"TransactionCapable"],[3,"SqliteParams"],[4,"DatabaseConstraint"],[4,"Name"],[3,"Error"],[4,"ErrorKind"],[13,"DatabaseDoesNotExist"],[13,"DatabaseAccessDenied"],[13,"DatabaseAlreadyExists"],[13,"AuthenticationFailed"],[13,"TableDoesNotExist"],[13,"UniqueConstraintViolation"],[13,"NullConstraintViolation"],[13,"ForeignKeyConstraintViolation"],[13,"ColumnNotFound"],[13,"LengthMismatch"],[13,"PoolTimeout"],[13,"TlsError"],[13,"ValueOutOfRange"],[13,"IncorrectNumberOfParameters"],[3,"Builder"],[3,"Quaint"],[3,"ResultSet"],[3,"Quaint"],[8,"Visitor"],[3,"CommonTableExpression"],[3,"Delete"],[3,"Expression"],[3,"AggregateToString"],[3,"Average"],[3,"Count"],[3,"Lower"],[3,"Maximum"],[3,"Minimum"],[3,"RowNumber"],[3,"RowToJson"],[3,"Sum"],[3,"Upper"],[3,"Function"],[3,"Insert"],[3,"SingleRowInsert"],[3,"MultiRowInsert"],[3,"JoinData"],[3,"Over"],[3,"Select"],[3,"Union"],[3,"Update"],[3,"Raw"],[3,"Values"],[3,"ResultRow"],[3,"ResultRowRef"],[3,"ResultSetIterator"],[3,"Transaction"],[3,"MssqlUrl"],[3,"Mssql"],[3,"Mysql"],[3,"MysqlUrl"],[3,"PostgreSql"],[3,"SslParams"],[3,"PostgresUrl"],[3,"Sqlite"],[3,"PooledConnection"],[3,"ValueDeserializer"],[3,"Mssql"],[3,"Mysql"],[3,"Postgres"],[3,"Sqlite"],[6,"GroupByDefinition"],[6,"OrderDefinition"]]}\
}');
initSearch(searchIndex);